{"/home/travis/build/npmtest/node-npmtest-gauss/test.js":"/* istanbul instrument in package npmtest_gauss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gauss/lib.npmtest_gauss.js":"/* istanbul instrument in package npmtest_gauss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gauss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gauss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gauss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gauss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gauss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gauss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gauss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gauss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gauss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gauss.__dirname + '/lib.npmtest_gauss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/index.js":"module.exports = require('./lib/gauss');","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/lib/gauss.js":"/**\n * Gauss\n * https://github.com/wayoutmind/gauss\n * Copyright(c) 2014 Fredrick Galoso\n * LICENSE: MIT/X11\n */\n\nvar Collection = require('./collection'),\n\tVector = require('./vector'),\n    TimeSeries = require('./timeseries');\n\n/**\n * Library version\n */\n\nexports.version = '0.2.12';\n\n/**\n * Expose constructors\n */\n\nexports.Collection = Collection;\nexports.Vector = Vector;\nexports.TimeSeries = TimeSeries;\n","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/lib/collection.js":"/**\n * Collection: n-dimensional array/set\n * Extends upon the Array datatype for set operations.\n * @author Fredrick Galoso\n */\n\n(function() {\n  var Collection = function(values) {\n    \"use strict\";\n    var collection = Array.isArray(values) ?\n      values :\n      Array.prototype.slice.call(arguments);\n\n    if (Array.prototype.slice.call(arguments).length === 0) {\n      collection = [];\n    }\n\n    var result = function(value, callback) {\n      if (callback) {\n        return callback(value);\n      }\n      else {\n        return value;\n      }\n    };\n\n    Object.defineProperty(collection, 'extend', {\n      /**\n       * Return a Collection extended with named functions.\n       * @param methods Object { 'functionName': function() {} }\n       */\n      value: function(methods, callback) {\n        for (var method in methods) {\n          Object.defineProperty(this, method, {\n            value: methods[method],\n            writable: true,\n            enumerable: false\n          });\n        }\n        return result(this, callback);\n      },\n      writable: true,\n      enumerable: false\n    });\n\n    collection.extend({\n      indexOf: function(element, callback) {\n        var index = -1;\n        for (var i = 0; i < this.length; i++) {\n          if (this[i] === element) {\n            index = i;\n            break;\n          }\n        }\n        return result(index, callback);\n      },\n      /**\n       * Returns the first index of an element that matches a condition.\n       * @param predicate {Function}\n       * @param callback {Function}\n       */\n      indexBy: function(predicate, callback) {\n        var index = -1;\n        for (var i = 0; i < this.length; i++) {\n          if (predicate(this[i])) {\n            index = i;\n            break;\n          }\n        }\n        return result(index, callback);\n      },\n      /**\n       * Returns the indices of all elements that match a value.\n       * @param element {Object}\n       * @param callback {Function}\n       */\n      indicesOf: function(element, callback) {\n        var start = this.indexOf(element),\n            end = this.lastIndexOf(element),\n            indices = new Collection();\n        if (start === end) {\n          indices.push(start);\n        }\n        else {\n          for (var i = start; i <= end; i++) {\n            if (this[i] === element) {\n              indices.push(i);\n            }\n          }\n        }\n        return result(indices, callback);\n      },\n      /**\n       * Returns all indices of an element that match a condition.\n       * @param predicate {Function}\n       * @param callback {Function}\n       */\n      indicesBy: function(predicate, callback) {\n        var start = 0,\n            end = this.length - 1,\n            indices = new Collection();\n        if (start === end) {\n          indices.push(start);\n        }\n        else {\n          for (var i = start; i <= end; i++) {\n            if (predicate(this[i])) {\n              indices.push(i);\n            }\n          }\n        }\n        return result(indices, callback);\n      },\n      /**\n       * Returns the last index of an element that matches a condition.\n       * @param predicate {Function}\n       * @param callback {Function}\n       */\n      lastIndexBy: function(predicate, callback) {\n        var index = -1;\n        for (var i = this.length - 1; i >= 0; i--) {\n          if (predicate(this[i])) {\n            index = i;\n            break;\n          }\n        }\n        return result(index, callback);\n      },\n      /**\n       * Returns all the elements that match a condition.\n       * @param predicate {Function or Object}\n       * @param callback {Function}\n       */\n      find: function(predicate, callback) {\n        var results = new Collection(),\n            comparator = function(e) { return e === true; };\n        if (typeof predicate === 'object') {\n          for (var i = 0; i < this.length; i++) {\n            var conditions = [];\n            for (var key in predicate) {\n              conditions.push(predicate[key] === this[i][key]);\n            }\n            if (conditions.every(comparator)) {\n              results.push(this[i]);\n            }\n          }\n        } else {\n          for (var i = 0; i < this.length; i++) {\n            if (predicate(this[i])) {\n              results.push(this[i]);\n            }\n          }\n        }\n        return result(results, callback);\n      },\n      /**\n       * Returns the first element that matches a condition.\n       * @param predicate {Function or Object}\n       * @param callback {Function}\n       */\n      findOne: function(predicate, callback) {\n        var element,\n            comparator = function(e) { return e === true; };\n        if (typeof predicate === 'object') {\n          for (var i = 0; i < this.length; i++) {\n            var conditions = [];\n            for (var key in predicate) {\n              conditions.push(predicate[key] === this[i][key]);\n            }\n            if (conditions.every(comparator)) {\n              element = this[i];\n              break;\n            }\n          }\n        } else {\n          for (var i = 0; i < this.length; i++) {\n            if (predicate(this[i])) {\n              element = this[i];\n              break;\n            }\n          }\n        }\n        return result(element, callback);\n      },\n      mode: function(callback) {\n        var map = {},\n            count = 1,\n            modes = new Collection();\n        for (var i = 0; i < this.length; i++) {\n          var e = this[i];\n          if (map[e] == null) {\n            map[e] = 1;\n          }\n          else {\n            map[e]++;\n          }\n          if (map[e] > count) {\n            modes = new Collection(e);\n            count = map[e];\n          } else if (map[e] == count) {\n            modes.push(e);\n            count = map[e];\n          }\n        }\n        if (modes.length === 1) {\n          modes = modes[0];\n        }\n        return result(modes, callback);\n      },\n      /**\n       * Returns the number of occurrences of value within a data set.\n       * @param element {Number or String}\n       * @param callback {Function}\n       */\n      frequency: function(element, callback) {\n        var freq = 0;\n        if (this.indexOf(element) !== -1) {\n          var buffer = this.copy().sort();\n          freq = buffer.lastIndexOf(element) - buffer.indexOf(element) + 1;\n        }\n        return result(freq, callback);\n      },\n      /**\n       * Returns an Object containing the (frequency) distribution of values within the Collection.\n       * @param format {String} Override distribution format with Percent Distribution. Default: Raw count\n       */\n      distribution: function(format, callback) {\n        var array = this.copy().sort(),\n            distribution = {};\n        for (var i = 0; i < array.length;) {\n          distribution[array[i]] = (format === 'relative') ?\n            array.frequency(array[i]) / array.length : array.frequency(array[i]);\n          i = (array.lastIndexOf(array[i]) + 1);\n        }\n        return result(distribution, callback);\n      },\n      /**\n       * Return Collection appended with Array (In place Array.concat).\n       * @param that Array\n       * @param callback Function\n       */\n      append: function(that, callback) {\n        collection = this.push.apply(this, that);\n        return result(this, callback);\n      },\n      /**\n       * Predicates\n       */\n      /* Test for equality between two collections */\n      equal: function(that, callback) {\n        var equality = !(this < that || that < this);\n        return result(equality, callback);\n      },\n      /* Returns a clone of the Collection object */\n      clone: function(callback) {\n        var object = Array.isArray(this) ? [] : {};\n        for (var i in this) {\n          if (i === 'clone') {\n            continue;\n          }\n          if (this[i] && typeof this[i] === 'object') {\n            object[i] = this[i].clone();\n          } else {\n            object[i] = this[i];\n          }\n        }\n        return result(object, callback);\n      },\n      /* Returns a copy of the values in a Collection object */\n      copy: function(callback) {\n        var copy = new Collection(this.slice());\n        return result(copy, callback);\n      },\n      /* Returns a vanilla Array of values */\n      toArray: function(callback) {\n        var array = Array.prototype.slice.call(this);\n        return result(array, callback);\n      },\n      /**\n       * [Accessor methods]\n       */\n      concat: function() {\n        var args = Array.prototype.slice.call(arguments);\n        var end = args[args.length - 1];\n        if (typeof end === 'function') {\n          if (typeof args[0] !== 'number') {\n            return end(new Collection(this.toArray().concat(args[0])));\n          }\n          else {\n            return end(new Collection(this.toArray().concat(args.slice(0, args.length - 1))));\n          }\n        }\n        else if (typeof args[0] !== 'number') {\n          return new Collection(this.toArray().concat(args[0]));\n        }\n        else {\n          return new Collection(this.toArray().concat(args));\n        }\n      },\n      slice: function(begin, end, callback) {\n        var args = Array.prototype.slice.call(arguments);\n        if (args.length === 3) {\n          return callback(new Collection(this.toArray().slice(begin, end)));\n        }\n        else if (args.length === 2) {\n          if (typeof args[1] === 'function') {\n            return callback(new Collection(this.toArray().slice(begin)));\n          }\n          else {\n            return new Collection(this.toArray().slice(begin, end));\n          }\n        }\n        else if (args.length === 1) {\n          return new Collection(this.toArray().slice(begin));\n        }\n        else {\n          return new Collection(this.toArray().slice());\n        }\n      },\n      split: function(predicate, callback) {\n        var split = new Collection();\n        split.push(this.toArray()\n                   .filter(function(e) { return !predicate(e); }));\n        split.push(this.toArray()\n                   .filter(predicate));\n        return result(split, callback);\n      },\n      unique: function(callback) {\n        var array = this.copy().sort(),\n            unique = new Collection();\n        for (var i = 0; i < array.length;) {\n          unique.push(array[i]);\n          i = (array.lastIndexOf(array[i]) + 1);\n        }\n        return result(unique, callback);\n      },\n      /**\n       * [Iteration methods]\n       */\n      filter: function(callback, next) {\n        var filter = new Collection(this.toArray().filter(callback));\n        return result(filter, next);\n      },\n      every: function(callback, next) {\n        var every = this.toArray().every(callback);\n        return result(every, next);\n      },\n      map: function(callback, next) {\n        var map = new Collection(this.toArray().map(callback));\n        return result(map, next);\n      },\n      some: function(callback, next) {\n        var some = this.toArray().some(callback);\n        return result(some, next);\n      },\n      reduce: function(callback, initialValue, next) {\n        var args = Array.prototype.slice.call(arguments);\n        if (args.length === 3) {\n          return next(this.toArray().reduce(callback, initialValue));\n        }\n        else if (args.length === 2) {\n          if (typeof args[1] === 'function') {\n            return next(this.toArray().reduce(callback));\n          }\n          else {\n            return this.toArray().reduce(callback, initialValue);\n          }\n        }\n        else {\n          return this.toArray().reduce(callback);\n        }\n      },\n      reduceRight: function(callback, initialValue, next) {\n        var args = Array.prototype.slice.call(arguments);\n        if (args.length === 3) {\n          return next(this.toArray().reduceRight(callback, initialValue));\n        }\n        else if (args.length === 2) {\n          if (typeof args[1] === 'function') {\n            return next(this.toArray().reduceRight(callback));\n          }\n          else {\n            return this.toArray().reduceRight(callback, initialValue);\n          }\n        }\n        else {\n          return this.toArray().reduceRight(callback);\n        }\n      },\n      union: function(that, callback) {\n        var union = this.append(that).unique();\n        return result(union, callback);\n      }\n    });\n\n    return collection;\n  };\n\n  Array.prototype.toCollection = function() {\n    return new Collection(this);\n  };\n\n  if (typeof window !== 'undefined') {\n    window.gauss = (typeof window.gauss === 'undefined' ? {} : window.gauss);\n    window.gauss.Collection = Collection;\n  }\n  else {\n    exports = module.exports = Collection;\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/lib/vector.js":"/**\n * Vector: One dimensional array\n * Extends upon the Array datatype to do some serious number crunching.\n * @author Fredrick Galoso\n */\n\n(function() {\n  var Collection = (typeof window === 'undefined') ?\n    require('./collection') : window.gauss.Collection;\n  Collection = new Collection();\n\n  var Vector = function(values) {\n    \"use strict\";\n    var vector = Array.isArray(values) ?\n      values :\n      Array.prototype.slice.call(arguments);\n\n    if (Array.prototype.slice.call(arguments).length === 0) {\n      vector = [];\n    }\n\n    // Initialize vector cache\n    var cache = {\n      sum: 0.0,\n      product: 1.0,\n      variance: 0.0,\n      sample: {\n        variance: 0.0\n      },\n      values: Array.prototype.slice.call(vector)\n    };\n\n    cache.sync = function() {\n      cache.values = Array.prototype.slice.call(vector);\n    };\n\n    // Sorting primatives\n    var asc = function(a, b) {\n      return a - b;\n    };\n\n    var extend = function(value, callback) {\n      value = Array.isArray(value) ?\n        new Vector(value) : value;\n      if (callback) {\n        return callback(value);\n      }\n      else {\n        return value;\n      }\n    };\n\n    var result = function(value, callback) {\n      if (callback) {\n        return callback(value);\n      }\n      else {\n        return value;\n      }\n    };\n\n    Object.defineProperty(vector, 'extend', {\n      /**\n       * Return a Vector extended with named functions.\n       * @param methods Object { 'functionName': function() {} }\n       */\n      value: function(methods, callback) {\n        Collection.extend.bind(this);\n        return Collection.extend.apply(this, arguments);\n      },\n      writable: true,\n      enumerable: false\n    });\n\n    vector.extend({\n      indexOf: Collection.indexOf,\n      indexBy: Collection.indexBy,\n      indicesOf: function(element, callback) {\n        return extend(Collection.indicesOf.apply(this, arguments), callback);\n      },\n      indicesBy: function(predicate, callback) {\n        return extend(Collection.indicesBy.apply(this, arguments), callback);\n      },\n      lastIndexBy: function(predicate, callback) {\n        return extend(Collection.lastIndexBy.apply(this, arguments), callback);\n      },\n      find: function(predicate, callback) {\n        return extend(Collection.find.apply(this, arguments), callback);\n      },\n      findOne: function(predicate, callback) {\n        return extend(Collection.findOne.apply(this, arguments), callback);\n      },\n      mode: function(callback) {\n        return extend(Collection.mode.apply(this), callback);\n      },\n      frequency: Collection.frequency,\n      distribution: Collection.distribution,\n      append: Collection.append,\n      equal: Collection.equal,\n      clone: function(callback) {\n        return extend(Collection.clone.apply(this), callback);\n      },\n      copy: function(callback) {\n        return extend(Collection.copy.apply(this), callback);\n      },\n      toArray: Collection.toArray,\n      /**\n       * [Accessor methods]\n       */\n      concat: function() {\n        var args = Array.prototype.slice.call(arguments);\n        var end = args[args.length - 1];\n        if (typeof end === 'function') {\n          return extend(Collection.concat.apply(this, arguments), end);\n        }\n        else {\n          return extend(Collection.concat.apply(this, arguments));\n        }\n      },\n      slice: function(begin, end, callback) {\n        return extend(Collection.slice.apply(this, arguments), callback);\n      },\n      split: function(predicate, callback) {\n        return extend(Collection.split.apply(this, arguments), callback);\n      },\n      unique: function(callback) {\n        return extend(Collection.unique.apply(this), callback);\n      },\n      /**\n       * [Iteration methods]\n       */\n      filter: function(callback, next) {\n        return extend(Collection.filter.apply(this, arguments), next);\n      },\n      every: Collection.every,\n      map: function(callback, next) {\n        return extend(Collection.map.apply(this, arguments), next);\n      },\n      some: Collection.some,\n      reduce: function(callback, initialValue, next) {\n        return extend(Collection.reduce.apply(this, arguments), next);\n      },\n      reduceRight: function(callback, initialValue, next) {\n        return extend(Collection.reduceRight.apply(this, arguments), next);\n      },\n      union: function(that, callback) {\n        return extend(Collection.union.apply(this, arguments), callback);\n      },\n      sum: function(callback) {\n        var sum = 0.0;\n        if (this.equal(cache.values) && cache.sum !== 0.0) {\n          sum = cache.sum;\n        }\n        else {\n          for (var i = 0; i < this.length;) {\n            sum += this[i++];\n          }\n          // Memoize sum\n          cache.sum = sum;\n          cache.sync();\n        }\n        return result(sum, callback);\n      },\n      product: function(callback) {\n        var product = 1.0;\n        if (this.equal(cache.values) && cache.product !== 1.0) {\n          product = cache.product;\n        }\n        else {\n          for (var i = 0; i < this.length;) {\n            product *= this[i++];\n            // Memoize product\n            cache.product = product;\n            cache.sync();\n          }\n        }\n        return result(product, callback);\n      },\n      mean: function(callback) {\n        var mean = this.sum() / this.length;\n        return result(mean, callback);\n      },\n      gmean: function(callback) {\n        var gmean = Math.pow(Math.abs(this.product()), 1 / this.length);\n        return result(gmean, callback);\n      },\n      hmean: function(callback) {\n        function reciprocalSum(set) {\n          for (var i = 0, sum = 0.0; i < set.length;) {\n            sum += 1 / Math.abs(set[i++]);\n          }\n          return sum;\n        }\n        var hmean = this.length / reciprocalSum(this);\n        return result(hmean, callback);\n      },\n      qmean: function(callback) {\n        var qmean = Math.sqrt(this.pow(2).sum() / this.length);\n        return result(qmean, callback);\n      },\n      pmean: function(p, callback) {\n        var pmean = 0.0;\n        for (var i = 0; i < this.length;) {\n          pmean += Math.pow(this[i++], p);\n        }\n        pmean = Math.pow(pmean / this.length, 1/p);\n        return result(pmean, callback);\n      },\n      median: function(callback) {\n        var buffer = this.copy();\n        buffer.sort(asc);\n        var median = (this.length % 2 === 0) ?\n          (buffer[this.length / 2 - 1] + buffer[this.length / 2]) / 2 :\n          buffer[parseInt((this.length / 2), 10)];\n        return result(median, callback);\n      },\n      range: function(callback) {\n        var range = this.max() - this.min();\n        return result(range, callback);\n      },\n      /* Returns a measure of how far a set of numbers are spread out from each other. */\n      variance: function(callback) {\n        var mean = 0.0,\n            variance = 0.0;\n        if (this.equal(cache.values) && cache.variance !== 0.0) {\n          variance = cache.variance;\n        }\n        else {\n          for (var i = 0; i < this.length; i++) {\n            var _mean = mean;\n            mean += (this[i] - _mean) / (i + 1);\n            variance += (this[i] - _mean) * (this[i] - mean);\n          }\n          variance /= this.length;\n          // Memoize variance\n          cache.variance = variance;\n          cache.sync();\n        }\n        return result(variance, callback);\n      },\n      stdev: function(percentile, callback) {\n        var stdev = 0.0;\n        if (!percentile) {\n          stdev = Math.sqrt(this.variance());\n        }\n        else {\n          stdev = this.density(percentile).stdev();\n        }\n        return result(stdev, callback);\n      },\n      /**\n       * Returns the value that below which a certain percent of observations fall within the data set.\n       * @param percent {Number}\n       * @param callback {Function}\n       */\n      percentile: function(percent, callback) {\n        var buffer = this.copy();\n        buffer.sort(asc);\n        var percentile = buffer[0];\n        if (percent > 0) {\n          percentile = buffer[Math.floor(this.length * percent)];\n        }\n        return result(percentile, callback);\n      },\n      /**\n       * Returns a Vector which is a percentile subset of values occurring within a data set.\n       *\n       * Example:\n       *  vector.density(0.50); would return an array consisting of the values\n       *  between the 25% and 75% percentile of the population\n       *\n       * @param percent {Number}\n       * @param callback {Function}\n       */\n      density: function(percent, callback) {\n        var slice;\n        var buffer = this.copy();\n        buffer.sort(asc);\n        if (percent === 1) {\n          slice = buffer;\n        }\n        else {\n          var begin = Math.round(this.length * (0.5 - percent / 2) - 1);\n          var end = Math.round(this.length * (0.5 + percent / 2) - 1);\n          slice = new Vector(buffer.slice(begin, end));\n        }\n        return result(slice, callback);\n      },\n      quantile: function(quantity, callback) {\n        var buffer = this.copy();\n        buffer.sort(asc);\n        var increment = 1.0 / quantity;\n        var results = new Vector();\n        if (quantity > this.length) {\n          throw new RangeError('Subset quantity is greater than the Vector length');\n        }\n        for (var i = increment; i < 1; i += increment) {\n          var index = Math.round(buffer.length * i) - 1;\n          if (index < buffer.length - 1) {\n            results.push(buffer[index]);\n          }\n        }\n        return result(results, callback);\n      },\n      /* Returns a Vector of values containing the sequential difference between numbers in a sequence. */\n      delta: function(callback) {\n        var delta = new Vector();\n        for (var i = 1; i < this.length; i++) {\n          delta.push(this[i] - this[i - 1]);\n        }\n        return result(delta, callback);\n      },\n      /** Moving average */\n      /**\n       * Returns a Vector of the simple moving average (SMA); unweighted means of the previous n data points.\n       * @param period Length of observation window for moving average\n       */\n      sma: function(period, callback) {\n        var sma;\n        if (period === 1) {\n          sma = this;\n        }\n        else {\n          // Memoize (rolling) sum to avoid additional O(n) overhead\n          var sum = new Vector(this.slice(0, period)).sum();\n          sma = new Vector([sum / period]);\n          for (var i = 1; i < this.length - period + 1; i++) {\n            sum += this[i + period - 1] - this[i - 1];\n            sma.push(sum / period);\n          }\n        }\n        return result(sma, callback);\n      },\n      /**\n       * Returns a Vector of the exponential moving average (EMA); weighted means of the previous n data points.\n       * @param options\n       *   Number Length of the observation window for moving average, use default smoothing ratio (2 / period + 1)\n       *   or\n       *   Object.period Length of the observation window for moving average\n       *   Object.ratio Function returning a Number to be used as smoothing ratio\n       */\n      ema: function(options, callback) {\n        // Single numeric argument defining the smoothing period\n        if (typeof options === 'number') {\n          var length = options;\n          options = {\n            period: length,\n            ratio: function(n) { return 2 / (n + 1); }\n          };\n        }\n        var sum = new Vector(this.slice(0, options.period)).sum(),\n            ema = new Vector([sum / options.period]),\n            ratio = options.ratio(options.period);\n        for (var i = 1; i < this.length - options.period + 1; i++) {\n          ema.push(\n            ratio *\n            (this[i + options.period - 1] - ema[i - 1]) +\n            ema[i - 1]\n          );\n        }\n        return result(ema, callback);\n      },\n      /**\n       * [Sample]\n       * Sample statistics methods\n       */\n      sample: {\n        mean: function(callback) {\n          var mean = vector.sum() / (vector.length - 1);\n          return result(mean, callback);\n        },\n        gmean: function(callback) {\n          var gmean = Math.pow(Math.abs(vector.product()), 1 / (vector.length - 1));\n          return result(gmean, callback);\n        },\n        hmean: function(callback) {\n          function reciprocalSum(set) {\n            for (var i = 0, sum = 0.0; i < set.length;) {\n              sum += 1 / Math.abs(set[i++]);\n            }\n            return sum;\n          }\n          var hmean = (vector.length - 1) / reciprocalSum(vector);\n          return result(hmean, callback);\n        },\n        qmean: function(callback) {\n          var qmean = Math.sqrt(vector.pow(2).sum() / (vector.length - 1));\n          return result(qmean, callback);\n        },\n        pmean: function(p, callback) {\n          var pmean = 0.0;\n          for (var i = 0; i < vector.length;) {\n            pmean += Math.pow(vector[i++], p);\n          }\n          pmean = Math.pow(pmean / (vector.length - 1), 1/p);\n          return result(pmean, callback);\n        },\n        variance: function(callback) {\n          var mean = 0.0,\n              variance = 0.0;\n          if (vector.equal(cache.values) && cache.sample.variance !== 0.0) {\n            variance = cache.sample.variance;\n          }\n          else {\n            for (var i = 0; i < vector.length; i++) {\n              var _mean = mean;\n              mean += (vector[i] - _mean) / (i + 1);\n              variance += (vector[i] - _mean) * (vector[i] - mean);\n            }\n            variance /= (vector.length - 1);\n            // Memoize variance\n            cache.sample.variance = variance;\n            cache.sync();\n          }\n          return result(variance, callback);\n        },\n        stdev: function(callback) {\n          var stdev = Math.sqrt(vector.sample.variance());\n          return result(stdev, callback);\n        }\n      },\n      /**\n       * [Math]\n       * Apply JavaScript Math methods to an entire Vector set of numbers\n       */\n      max: function(callback) {\n        var max = Math.max.apply({}, this);\n        return result(max, callback);\n      },\n      min: function(callback) {\n        var min = Math.min.apply({}, this);\n        return result(min, callback);\n      },\n      abs: function(callback) {\n        var abs = this.map(Math.abs);\n        return result(abs, callback);\n      },\n      acos: function(callback) {\n        var acos = this.map(Math.acos);\n        return result(acos, callback);\n      },\n      asin: function(callback) {\n        var asin = this.map(Math.asin);\n        return result(asin, callback);\n      },\n      atan: function(callback) {\n        var atan = this.map(Math.atan);\n        return result(atan, callback);\n      },\n      ceil: function(callback) {\n        var ceil = this.map(Math.ceil);\n        return result(ceil, callback);\n      },\n      cos: function(callback) {\n        var cos = this.map(Math.cos);\n        return result(cos, callback);\n      },\n      exp: function(callback) {\n        var exp = this.map(Math.exp);\n        return result(exp, callback);\n      },\n      floor: function(callback) {\n        var floor = this.map(Math.floor);\n        return result(floor, callback);\n      },\n      log: function(callback) {\n        var log = this.map(Math.log);\n        return result(log, callback);\n      },\n      pow: function(exponent, callback) {\n        var pow = this.map(function(x) {\n          return Math.pow(x, exponent);\n        });\n        return result(pow, callback);\n      },\n      round: function(callback) {\n        var round = this.map(Math.round);\n        return result(round, callback);\n      },\n      sin: function(callback) {\n        var sin = this.map(Math.sin);\n        return result(sin, callback);\n      },\n      sqrt: function(callback) {\n        var sqrt = this.map(Math.sqrt);\n        return result(sqrt, callback);\n      },\n      tan: function(callback) {\n        var tan = this.map(Math.tan);\n        return result(tan, callback);\n      },\n      /**\n       * Override Array methods and add Vector functionality\n       *\n       * [Mutator methods]\n       *\n      /* Returns updated Vector and performs on-line calculations */\n      push: function() {\n        var mean = (this.length === 0) ? 0.0 : cache.sum / this.length;\n        var variance = (this.length === 0) ? 0.0 : cache.variance * this.length;\n        var args = Array.prototype.slice.call(arguments);\n        var end = args[args.length - 1];\n        var length = this.length;\n\n        if (typeof end === 'function') {\n          for (var i = 0; i < args.length - 1; i++) {\n            Array.prototype.push.call(this, args[i]);\n            Array.prototype.push.call(cache.values, args[i]);\n\n            // Update variance\n            var _mean = mean;\n            mean += (args[i] - _mean) / this.length;\n            variance += (args[i] - _mean) * (args[i] - mean);\n\n            // Update aggregates\n            cache.sum += args[i];\n            cache.product *= args[i];\n\n            length++;\n          }\n          variance /= this.length;\n          // Memoize variance\n          cache.variance = variance;\n          return end(length);\n        }\n        else {\n          for (var i = 0; i < args.length; i++) {\n            Array.prototype.push.call(this, args[i]);\n            Array.prototype.push.call(cache.values, args[i]);\n\n            // Update variance\n            var _mean = mean;\n            mean += (args[i] - _mean) / this.length;\n            variance += (args[i] - _mean) * (args[i] - mean);\n\n            // Update aggregates\n            cache.sum += args[i];\n            cache.product *= args[i];\n\n            length++;\n          }\n          variance /= this.length;\n          // Memoize variance\n          cache.variance = variance;\n          return length;\n        }\n      },\n      /**\n       * [Binary operations]\n       */\n      /**\n       *\n       * Returns a new vector which is the result of adding the input, element-wise to existing vector.\n       * Supports scalars and arrays of the same length of the original vector\n       */\n      add: function(that, callback) {\n        var add = new Vector();\n        if (Array.isArray(that)) {\n          if (that.length !== this.length) {\n            throw new RangeError(\"Cannot add vectors of differing lengths\");\n          }\n          for (var i = 0; i < this.length; i++) {\n            add[i] = this[i] + that[i];\n          }\n        }\n        else {\n          for (var j = 0; j < this.length; j++) {\n            add[j] = this[j] + that;\n          }\n        }\n        return result(add, callback);\n      },\n      /**\n       *\n       * Returns a new vector which is the result of element-wise subtracting the input from the original vector.\n       * Supports scalars and arrays of the same length of the original vector\n       */\n      subtract: function(that, callback) {\n        var subtract = new Vector();\n        if (Array.isArray(that)) {\n          if (that.length !== this.length) {\n            throw new RangeError(\"Cannot subtract vectors of differing lengths\");\n          }\n          for (var i = 0; i < this.length; i++) {\n            subtract[i] = this[i] - that[i];\n          }\n        }\n        else {\n          for (var j = 0; j < this.length; j++) {\n            subtract[j] = this[j] - that;\n          }\n        }\n        return result(subtract, callback);\n      },\n      /**\n       *\n       * Returns a new vector which is the result of element-wise multiplying the original by the input.\n       * Supports scalars and arrays of the same length of the original vector\n       */\n      multiply: function(that, callback) {\n        var multiply = new Vector();\n        if (Array.isArray(that)) {\n          if (that.length !== this.length) {\n            throw new RangeError(\"Cannot multiply vectors of differing lengths\");\n          }\n          for (var i = 0; i < this.length; i++) {\n            multiply[i] = this[i] * that[i];\n          }\n        }\n        else {\n          for (var j = 0; j < this.length; j++) {\n            multiply[j] = this[j] * that;\n          }\n        }\n        return result(multiply, callback);\n      },\n      /**\n       *\n       * Returns a new vector which is the result of element-wise dividing the original by the input.\n       * Supports scalars and arrays of the same length of the original vector\n       */\n      divide: function(that, callback) {\n        var divide = new Vector();\n        if (Array.isArray(that)) {\n          if (that.length !== this.length) {\n            throw new RangeError(\"Cannnot divide vectors of differing lengths\");\n          }\n          for (var i = 0; i < this.length; i++) {\n            divide[i] = this[i] / that[i];\n          }\n        }\n        else {\n          for (var j = 0; j < this.length; j++) {\n            divide[j] = this[j] / that;\n          }\n        }\n        return result(divide, callback);\n      }\n    });\n\n    cache.sum = vector.sum();\n    cache.product = vector.product();\n    cache.variance = vector.variance();\n\n    return vector;\n  };\n\n  Array.prototype.toVector = function() {\n    return new Vector(this);\n  };\n\n  if (typeof window !== 'undefined') {\n    window.gauss = (typeof window.gauss === 'undefined' ? {} : window.gauss);\n    window.gauss.Vector = Vector;\n  }\n  else {\n    exports = module.exports = Vector;\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/lib/timeseries.js":"/**\n * TimeSeries: Nested array\n * Facilitates analysis of time series.\n * @author Fredrick Galoso\n */\n\n(function() {\n  var Collection = (typeof window === 'undefined') ?\n    require('./collection') : window.gauss.Collection;\n  Collection = new Collection();\n  var Vector = (typeof window === 'undefined') ?\n    require('./vector') : window.gauss.Vector;\n\n  var TimeSeries = function(values) {\n    \"use strict\";\n    var timeseries = (arguments.length === 2) ?\n      Array.prototype.slice.call(arguments) :\n      values;\n\n    if (Array.prototype.slice.call(arguments).length === 0) {\n      timeseries = [];\n    }\n\n    var result = function(value, callback) {\n      if (callback) {\n        return callback(value);\n      }\n      else {\n        return value;\n      }\n    };\n\n    Object.defineProperty(timeseries, 'extend', {\n      /**\n       * Return a TimeSeries extended with named functions.\n       * @param methods Object { 'functionName': function() {} }\n       */\n      value: function(methods, callback) {\n        Collection.extend.bind(this);\n        return Collection.extend.apply(this, arguments);\n      },\n      writable: true,\n      enumerable: false\n    });\n\n    timeseries.extend({\n      byValue: function(a, b) {\n        return ((a[1] < b[1]) ? -1 : ((a[1] > b[1]) ? 1 : 0));\n      },\n      byDate: function(a, b) {\n        return ((a[0] < b[0]) ? -1 : ((a[0] > b[0]) ? 1 : 0));\n      },\n      times: function(callback) {\n        var times = new Vector(Array.prototype.map.call(this, function(i) {\n          return i[0];\n        }));\n        return result(times, callback);\n      },\n      values: function(callback) {\n        var values = new Vector(Array.prototype.map.call(this, function(i) {\n          return i[1];\n        }));\n        return result(values, callback);\n      }\n    });\n\n    timeseries.extend({\n      every: Collection.every,\n      append: Collection.append\n    });\n\n    return timeseries;\n  };\n\n  Array.prototype.toTimeSeries = function() {\n    return new TimeSeries(this);\n  };\n\n  if (typeof window !== 'undefined') {\n    window.gauss = (typeof window.gauss === 'undefined' ? {} : window.gauss);\n    window.gauss.TimeSeries = TimeSeries;\n  }\n  else {\n    exports = module.exports = TimeSeries;\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-gauss/node_modules/gauss/lib/amd.js":"(function(gauss) {\n  if (typeof define === 'function' && define.amd) {\n    define('gauss', [], function() {\n      return gauss;\n    });\n  }\n})(window.gauss);\n"}